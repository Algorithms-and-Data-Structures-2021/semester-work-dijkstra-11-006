#pragma once
#include <vector>

// Заголовочный файл с объявлением структуры данных

namespace itis {

  /**
   * сердце семестровой - АЛГОРИТМ ДЕЙКСТЫ
   * работает за O(m*log(n))
   *
   * @params matrix - матрица смежности, позволяющая получать веса дуг за O(1)
   *         vertex - номер самой вершины
   * @return массив из интов содержащий на I-ом месте
   *  расстояние до вершины I от изначально заданной вершины - vertex.
   *  Если расстояние равно значению INF => до нее добраться невозможно
   */
  std::vector<int> algoritm_Dijkstra(std::vector<std::vector<int>> matrix, int vertex);


  /**
   * Бинарная куча или же Binary Heap
   * хранит в себе массив пар,
   * на мервом месте длина до вершины, на втором - номер вершины
   */
  struct BinaryHeap{
   private:
    // поля структуры
    unsigned int size_{0};                            // длина кучи
    std::vector<std::pair<int, int>>* data_{nullptr}; // дерево

    /**
     * внутренняя сортировка дерева, вызывается,
     * когда добавляем новый элемент
     *
     * @params int - номер вершины, которую надо проверить,
     *  находится ли она на своем месте
     *  или же ее надо спустить на 1 уровень ниже
     */
    void down_up_sort(int);

    /**
     * внутренняя сортировка дерева, вызывается
     * после удаления самого "маленького" элемента дерева
     *
     * @parsms int - номер вершины, которую надо проверить,
     *  находится ли она на своем месте
     *  или же ее надо спустить на 1 уровень ниже
     */
    void return_to_normal(int);

    /**
     * обмен значениями двух элементов
     *
     * @params first - позиция первого элемента
     * @params second - второго
     */
    void swap(int first, int second);

   public:

    BinaryHeap();

    /**
     * просмотр верхней или же "минимальной" пары
     *
     * @return верхняя пара
     * @throws logic_error при выполнении операции над пустой кучей
     */
    std::pair<int, int> top_item();

    /**
     * удаление верхней или же "минимальной" пары
     *
     * @return верхняя пара
     * @throws logic_error при выполнении операции над пустой кучей
     */
    std::pair<int, int> pop();

    /**
     * добавление новой пары в кучу
     *
     * @params new_pair - новая пара, первый элеметн
     *  содержит в седе длину до вершины, второй номер вершины
     */
    void push_back(std::pair<int, int> new_pair);

    /**
     * Проверка является ли куча пустой.
     * @return очередь пустая - true, иначе - false.
     */
    bool empty();

    /**
     * Высвобождение выделенной кучью памяти.
     */
    ~BinaryHeap();

    /**
     * Количество элементов в куче.
     * @return неотрицательное число
     */
    int size() const {
      return size_;
    }
  };
}  // namespace itis